#!/usr/bin/env python3

"""
For all images with a semantic version tag (e.g. 0.0.1), delete all but the
latest for each unique image name from a registry.
"""

from argparse import ArgumentParser
from inspect import getdoc
from itertools import islice
import re
from subprocess import SubprocessError, PIPE, Popen, run
from sys import modules
from typing import Iterable

from utils import SemanticVersion


parser = ArgumentParser(description=getdoc(modules[__name__]))
parser.add_argument(
    "registry",
    nargs="?",
    help="The registry to clean.",
    default="localhost:5000",
)
args = parser.parse_args()

REGISTRY = args.registry
bypass_tls = (
    REGISTRY.startswith("localhost")
    or REGISTRY.startswith("127.0.0.1")
    or REGISTRY.startswith("[::1]")
)
TLS_ARGS = ["-f", "-k"] if bypass_tls else []
del bypass_tls

del args


def delete_from_registry(image: str) -> None:
    run(["reg", "rm", "-f", "-k", f"{REGISTRY}/{image}"], check=True)


VERSION_PATTERN = re.compile(r"^ (\d+) \. (\d+) \. (\d+) ,? $", re.VERBOSE)


def parse_versions(fields: Iterable[str]) -> set[SemanticVersion]:
    def gen():
        for field in fields:
            if match := VERSION_PATTERN.match(field):
                yield SemanticVersion(*(int(x) for x in match.groups()))

    return set(gen())


def extract_outdated_images(line: str) -> Iterable[str]:
    image, *fields = line.split()
    versions = parse_versions(fields)
    highest = max(versions)
    versions.remove(highest)
    for version in versions:
        yield f"{image}:{version}"


with Popen(["reg", "ls"] + TLS_ARGS + [REGISTRY], stdout=PIPE) as proc:
    if proc.stdout:
        lines = islice((line for line in proc.stdout), 2, None)
        for raw in lines:
            line = raw.decode()
            images = extract_outdated_images(line)
            for image in images:
                delete_from_registry(image)
    if proc.wait() != 0:
        raise SubprocessError()
